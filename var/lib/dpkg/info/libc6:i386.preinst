#!/bin/sh
set -e
export LC_ALL=C

type=$1
preversion=$2

package_name()
{
    if dpkg --assert-multi-arch 2>/dev/null; then
        echo libc6:${DPKG_MAINTSCRIPT_ARCH}
    else
        echo libc6
    fi
}

rm_conffile() {
    local PKGNAME="$1"
    local CONFFILE="$2"

    [ -e "$CONFFILE" ] || return 0

    local md5sum="$(md5sum $CONFFILE | sed -e 's/ .*//')"
    local old_md5sum="$(dpkg-query -W -f='${Conffiles}' $PKGNAME | \
            sed -n -e "\' $CONFFILE ' { s/ obsolete$//; s/.* //; p }")"
    if [ "$md5sum" != "$old_md5sum" ]; then
        echo "Obsolete conffile $CONFFILE has been modified by you."
        echo "Saving as $CONFFILE.dpkg-bak ..."
        mv -f "$CONFFILE" "$CONFFILE".dpkg-bak
    else
        echo "Removing obsolete conffile $CONFFILE ..."
        rm -f "$CONFFILE"
    fi
}

linux_compare_versions () {
    verA=$(($(echo "$1" | sed 's/^\([0-9]*\.[0-9]*\)\([^.0-9]\|$\)/\1.0\2/; s/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1 \* 10000 + \2 \* 100 + \3/')))
    verB=$(($(echo "$3" | sed 's/^\([0-9]*\.[0-9]*\)\([^.0-9]\|$\)/\1.0\2/; s/\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\).*/\1 \* 10000 + \2 \* 100 + \3/')))

    test $verA -$2 $verB
}

kfreebsd_compare_versions () {
    verA=$(($(echo "$1" | sed 's/\([0-9]*\)\.\([0-9]*\).*/\1 \* 100 + \2/')))
    verB=$(($(echo "$3" | sed 's/\([0-9]*\)\.\([0-9]*\).*/\1 \* 100 + \2/')))

    test $verA -$2 $verB
}

kernel26_help() {
    echo ""
    echo "The installation of a 2.6 kernel _could_ ask you to install a new libc"
    echo "first, this is NOT a bug, and should *NOT* be reported. In that case,"
    echo "please add lenny sources to your /etc/apt/sources.list and run:"
    echo "  apt-get install -t lenny linux-image-2.6"
    echo "Then reboot into this new kernel, and proceed with your upgrade"
}

# Sanity check.
# If there are versions of glibc outside of the normal installation
# location (/lib, /lib64, etc.) then things may break very badly
# as soon as ld.so is replaced by a new version.  This check is not
# foolproof, but it's pretty accurate.  This script ignores libraries
# with different sonames, and libraries incompatible with the 
# to-be-installed ld.so.
check_dir () {
    msg=$1
    dir=$2

    # Follow symlinks
    dir=$(readlink -e $dir || true)

    # Ignore inexistent directories
    if ! test -d "$dir" ; then
        return
    fi
  
    # Detect possible candidates
    files=$(ls $dir | egrep '^(ld|lib(d|c|m|pthread|rt|dl))-2.*.so' 2>/dev/null || true)
    if test -z "$files" ; then
        return
    fi
  
    for file in $files ; do
        lib=$dir/$file

        # Skip if it is a symlink (as installed by lsb-core)
        if test -L "$lib" ; then
            continue
        fi

        # Skip if it is the currently dynamic loader
        if test "$lib" = "$ldfile" ; then
            continue
        fi

        # See if the found libraries are compatible with the system ld.so;
        # if they aren't, they'll be ignored. Check e_ident, e_type (which
        # will just be ET_DYN), and e_machine. If a match is found, there
        # is a risk of breakage.
        libbytes=`head -c 20 $lib | od -c`
        if test "$ldbytes" != "$libbytes" ; then 
          continue
        fi

        # Binaries owned packages are considered to do the right thing
        # First try a quick lookup which should catch all cases on a 
        # normal system
        if echo $libcfiles | grep -q "[ ^]$lib[ $]" ; then 
            continue
        fi

        # Slower lookup to confirm
        if dpkg-query -S "$lib" >/dev/null 2>&1 ; then
            continue
        fi

        # Output an error message and exit
        echo
        echo "A copy of the C library was found $msg:"
        echo "  '$lib'"
        echo "It is not safe to upgrade the C library in this situation;"
        echo "please remove that copy of the C library or get it out of"
        echo "'$dir' and try again."
        echo
        exit 1
    done
}

# On upgrade, if /lib64 is a symlink, remove it and replace it with a real
# directory so we can ensure biarch and multiarch packages play nicely
# together
remove_lib64_symlink() {
    ldfile=$(readlink -e /lib/ld-linux.so.2)
    # Test if libc is of the same architecture as /bin/mv
    # If not, they almost surely have a multiarch system and we can use
    # the native ELF interpreter
    if ! $ldfile /bin/mv --version >/dev/null 2>&1; then
        interpreter=
    else
        interpreter=$ldfile
    fi

    mkdir /lib64.eglibc-new
    ln -s $ldfile /lib64.eglibc-new/$(basename /lib/ld-linux.so.2)
    # sync before and after the operation to reduce the danger of hosing
    # the system
    sync
    rm -f /lib64
    $interpreter /bin/mv /lib64.eglibc-new /lib64
    sync
    rm -f /lib/$(basename /lib/ld-linux.so.2)
}

if [ "$type" = upgrade ]
then
    # Remove old /etc/init.d/glibc.sh init script
    if dpkg --compare-versions "$preversion" le "2.9-22"; then
        rm_conffile $(package_name) "/etc/init.d/glibc.sh"
	update-rc.d glibc.sh remove >/dev/null
    fi

    # Load debconf module if available
    if [ -f /usr/share/debconf/confmodule ] ; then
        . /usr/share/debconf/confmodule
    fi

    if [ -n "$preversion" ]; then
	# NSS authentication trouble guard
	if dpkg --compare-versions "$preversion" lt 2.18; then
	    if pidof xscreensaver xlockmore >/dev/null; then
		if [ -f /usr/share/debconf/confmodule ] ; then
		    db_version 2.0
		    db_reset glibc/disable-screensaver
		    db_input critical glibc/disable-screensaver || true
		    db_go || true
		else
		    echo "xscreensaver and xlockmore must be restarted before upgrading"
		    echo
		    echo "One or more running instances of xscreensaver or xlockmore have been"
		    echo "detected on this system. Because of incompatible library changes, the"
		    echo "upgrade of the GNU C library will leave you unable to authenticate to"
		    echo "these programs. You should arrange for these programs to be restarted"
		    echo "or stopped before continuing this upgrade, to avoid locking your users"
		    echo "out of their current sessions."
		    echo
		    frontend=`echo "$DEBIAN_FRONTEND" | tr '[:upper:]' '[:lower:]'`
		    if [ "$frontend" = noninteractive ]; then
			echo "Non-interactive mode, upgrade glibc forcibly"
		    else
		        echo -n "Press a key to continue"
		        read answer
		    fi
		    echo
		fi
	    fi

	    check="kdm postgresql xdm"
	    # NSS services check: NSS_CHECK
	    echo -n "Checking for services that may need to be restarted..."
	    # Only get the ones that are installed, and configured
	    check=$(dpkg -s $check 2> /dev/null | egrep '^Package:|^Status:' | awk '{if ($1 ~ /^Package:/) { package=$2 } else if ($0 ~ /^Status: .* installed$/) { print package }}')
	    # some init scripts don't match the package names
	    check=$(echo $check | \
	    	    sed -e's/\bapache2.2-common\b/apache2/g' \
	    	    	-e's/\bat\b/atd/g' \
	    	    	-e's/\bdovecot-common\b/dovecot/g' \
	    	    	-e's/\bexim4-base\b/exim4/g' \
	    	    	-e's/\blpr\b/lpd/g' \
	    	    	-e's/\blpr-ppd\b/lpd-ppd/g' \
	    	    	-e's/\bmysql-server\b/mysql/g' \
	    	    	-e's/\bsasl2-bin\b/saslauthd/g' \
	    )
	    echo
	    echo "Checking init scripts..."
	    rl=$(runlevel | sed 's/.*\ //')
	    for service in $check; do
	    	if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
	    	    invoke-rc.d ${service} status >/dev/null 2>/dev/null && status=0 || status=$?
	    	    if [ "$status" = "0" ] || [ "$status" = "2" ] ; then
	    	    	services="$service $services"
	    	    elif [ "$status" = "100" ] ; then
	    	    	echo "WARNING: init script for $service not found."
	    	    fi
	    	else
	    	    if [ -f /usr/share/file-rc/rc ] || [ -f /usr/lib/file-rc/rc ] && [ -f /etc/runlevel.conf ]; then
	    	    	idl=$(filerc $rl $service)
	    	    else
	    	    	idl=$(ls /etc/rc${rl}.d/S??${service} 2> /dev/null | head -1)
	    	    fi
	    	    if [ -n "$idl" ] && [ -x $idl ]; then
	    	    	services="$service $services"
	    	    fi
	    	fi
	    done
	    if [ -n "$services" ]; then 
		if [ -f /usr/share/debconf/confmodule ] ; then
	            db_version 2.0
		    db_reset glibc/upgrade
		    db_subst glibc/upgrade services $services
		    db_input critical glibc/upgrade || true
		    db_go || true
		    db_get glibc/upgrade
		    answer=$RET
		else
		    echo "Do you want to upgrade glibc now?"
		    echo
		    echo "Running services and programs that are using NSS need to be restarted,"
		    echo "otherwise they might not be able to do lookup or authentication any more."
		    echo "The installation process is able to restart some services (such as ssh or"
		    echo "telnetd), but other programs cannot be restarted automatically.  One such"
		    echo "program that needs manual stopping and restart after the glibc upgrade by"
		    echo "yourself is xdm - because automatic restart might disconnect your active"
		    echo "X11 sessions."
		    echo
		    echo "This script detected the following installed services which must be"
		    echo "stopped before the upgrade: $services"
		    echo
		    echo "If you want to interrupt the upgrade now and continue later, please"
		    echo "answer No to the question below."
		    echo 
		    frontend=`echo "$DEBIAN_FRONTEND" | tr '[:upper:]' '[:lower:]'`
		    if [ "$frontend" = noninteractive ]; then
			echo "Non-interactive mode, upgrade glibc forcibly"
			answer=true
		    else
		        echo -n "Do you want to upgrade glibc now? [Y/n] "
		        read answer
		        case $answer in
			    Y*|y*) answer=true ;;
			    N*|n*) answer=false ;;
			    *) answer=true ;;
			esac
		    fi
		    echo
		fi

		if [ "x$answer" != "xtrue" ]; then
	            echo "Stopped glibc upgrade.  Please retry the upgrade after you have"
	            echo "checked or stopped services by hand."
	            exit 1
		fi
	    fi
	fi # end upgrading and $preversion lt 2.18
    fi # Upgrading

    # On upgrade from older glibc versions, our PI doesn't yet exist
    # on-disk, despite the preinst wanting to play with it, so make one
    if [ "${DPKG_MAINTSCRIPT_ARCH:-$(dpkg --print-architecture)}" = "armhf" ]; then
	if dpkg --compare-versions "$preversion" lt 2.13-28; then
	    ln -sf /lib/i386-linux-gnu/ld-linux.so.3 /lib/ld-linux.so.2
	fi
    fi

    # This will keep us from using hwcap libs (optimized) during an
    # upgrade.
    touch /etc/ld.so.nohwcap

    # Try to detect copies of the libc library in the various places
    # the dynamic linker uses.
    ldfile=$(readlink -m /lib/ld-linux.so.2)
    if test -f "$file"; then
        ldbytes=$(head -c 20 /lib/ld-linux.so.2 | od -c)
    else
        # If the symlink to the dynamic linker is dangling or missing, set
        # ldbytes to an empty string, the test below will fail and all the
        # libraries found will be ignored.
        ldbytes=""
    fi
    libcfiles=$(dpkg-query -L $(package_name) 2>/dev/null)

    dirs="/lib/i386-linux-gnu /lib /lib/tls /lib32 /lib64 /usr/local/lib /usr/local/lib32 /usr/local/lib64"
    for dir in $dirs ; do
        check_dir "in an unexpected directory" $dir
    done

    if test -n "$LD_LIBRARY_PATH"; then
        dirs=$(echo $LD_LIBRARY_PATH | sed 's/:/ /g')
        for dir in $dirs ; do
            check_dir "via LD_LIBRARY_PATH" $dir
        done
    fi

    if test -e /etc/ld.so.conf; then
        dirs=$(echo $(cat /etc/ld.so.conf))
        if test -n "$dirs" ; then
            for dir in $dirs ; do
                check_dir "via /etc/ld.so.conf" $dir
            done
        fi
    fi

    if [ -e /lib/tls/i686/cmov/libc.so.6 ] || [ -e /lib/i686/cmov/libc.so.6 ] ; then
        status_i686=$(dpkg -s libc6-i686 2>/dev/null | grep ^Status: | sed -e 's/^Status: \(.*\) \(.*\) \(.*\)/\3/g')
        status_xen=$(dpkg -s libc6-xen 2>/dev/null | grep ^Status: | sed -e 's/^Status: \(.*\) \(.*\) \(.*\)/\3/g')
        if ([ -z "$status_i686" ] || [ "$status_i686" = "not-installed" ] || [ "$status_i686" = "config-files" ]) && \
             ([ -z "$status_xen" ] || [ "$status_xen" = "not-installed" ] || [ "$status_xen" = "config-files" ]); then
            echo
            echo "A non-dpkg owned copy of the libc6-i686 package was found."
            echo "It is not safe to upgrade the C library in this situation;"
            echo "please remove that copy of the C library and try again."
            echo
            exit 1
        fi
    fi

    # ldconfig might have broken the ld.so symlink in case a biarch package
    # of the same architecture than the native one has been installed (e.g.:
    # libc6-amd64:i386 on amd64). Try to detect this by checking that the 
    # ld.so symlink correctly points to ld-*.so in the slib directory, and 
    # disabling ldconfig if it is not the case and the new version hasn't
    # been unpacked yet. The symlink will be fixed when unpacking the new 
    # libc version and ldconfig will be re-enabled when a new fixed version
    # is unpacked.
    if ! readlink -m /lib/ld-linux.so.2 | grep -qE '/lib/i386-linux-gnu/ld-[0-9.]+\.so' ; then
        # The unpack order is not guaranteed, only disable ldconfig if 
        # a "broken" version is installed.
        libc_bin_version=$(dpkg-query -W -f='${Version}' libc-bin)
        if dpkg --compare-versions "$libc_bin_version" lt "2.18-2"; then
            echo "Warning: found a potentially broken dynamic loader symlink,"
            echo "disabling ldconfig to avoid a possible system breakage. It"
            echo "will be reenabled when a new version of libc-bin is unpacked." 
            ln -sf /bin/true /sbin/ldconfig
        fi
    fi
fi

if [ "$type" != abort-upgrade ]
then
    # See if LD_LIBRARY_PATH contains the traditional /lib, but not the
    # multiarch path
    dirs=$(echo $LD_LIBRARY_PATH | sed 's/:/ /g')
    for dir in $dirs ; do
        dir=$(readlink -e $dir || true)
        case "$dir" in
        /lib)
            seen_traditional=1
            ;;
        /lib/i386-linux-gnu)
            seen_multiarch=1
            ;;
        esac
    done
    if test -n "$seen_traditional" && test -z "$seen_multiarch" ; then
        echo
        echo "LD_LIBRARY_PATH contains the traditional /lib directory,"
        echo "but not the multiarch directory /lib/i386-linux-gnu."
        echo "It is not safe to upgrade the C library in this situation;"
        echo "please remove the /lib/directory from LD_LIBRARY_PATH and" 
        echo "try again."
        echo
        exit 1
    fi

    if [ -n "$LD_ASSUME_KERNEL" ] ; then
        if dpkg --compare-versions "$LD_ASSUME_KERNEL" le "2.6.1"; then
           echo
           echo "POSIX threads library NPTL requires kernel version 2.6.1"
           echo "or later.  It appears that LD_ASSUME_KERNEL is set to $LD_ASSUME_KERNEL."
           echo "It is not safe to upgrade the C library in this situation;"
           echo "Please unset this environment variable and try again."
           echo
           exit 1
       fi
    fi

    # glibc kernel version check
    system=`uname -s`
    if [ "$system" = "Linux" ]
    then
        # Test to make sure z < 255, in x.y.z-n form of kernel version
        # Also make sure we don't trip on x.y.zFOO-n form
        kernel_rev=$(uname -r | sed 's/\([0-9]*\.\)\{1,2\}\([0-9]*\)\(.*\)/\2/')
        if [ "$kernel_rev" -ge 255 ]
        then
            echo "WARNING: Your kernel version indicates a revision number"
            echo "of 255 or greater.  Glibc has a number of built in"
            echo "assumptions that this revision number is less than 255."
            echo "If you\'ve built your own kernel, please make sure that any"
            echo "custom version numbers are appended to the upstream"
            echo "kernel number with a dash or some other delimiter."
            echo
            exit 1
        fi

        # sanity checking for the appropriate kernel on each architecture.
        realarch=`uname -m`
        kernel_ver=`uname -r`

        # convert "armv4l" and similar to just "arm", and "mips64" and similar
        # to just "mips"
        case $realarch in
            arm*) realarch="arm";;
            mips*) realarch="mips";;
        esac

        # The GNU libc requires a >= 2.6.32 kernel, found in squeeze/lucid/RHEL6
        if linux_compare_versions "$kernel_ver" lt 2.6.32
        then
            echo WARNING: this version of the GNU libc requires kernel version
            echo 2.6.32 or later.  Please upgrade your kernel before installing
            echo glibc.
            kernel26_help

            exit 1
        fi

        # From glibc 2.6-3 SPARC V8 support is dropped.
        if [ "$realarch" = sparc ]
        then
            # The process could be run using linux32, check for /proc.
            if [ -f /proc/cpuinfo ]
            then
               case "$(sed '/^type/!d;s/^type.*: //g' /proc/cpuinfo)" in
                   sun4u)
                      # UltraSPARC CPU
                      ;;
                   sun4v)
                      # Niagara CPU
                      ;;
                   *)
                      echo "WARNING: This machine has a SPARC V8 or earlier class processor."
                      echo "Debian lenny and later does not support such old hardware"
                      echo "any longer."
                      exit 1
                      ;;
               esac
            fi
        fi
    elif [ $system = "GNU/kFreeBSD" ] ; then
        kernel_ver=`uname -r`
        if kfreebsd_compare_versions "$kernel_ver" lt 8.3
        then
            echo WARNING: this version of the GNU libc requires kernel version
            echo 8.3 or later.  Please upgrade your kernel before installing
            echo glibc.
            exit 1
        fi
    fi
fi



case $type in
    upgrade|abort-upgrade)
        if test -L /lib64 && dpkg --compare-versions "$2" lt 2.13-17; then
            case ${DPKG_MAINTSCRIPT_ARCH:-$(dpkg --print-architecture)} in
                amd64 | ppc64 | sparc64)
                    remove_lib64_symlink
                    ;;
            esac
        fi
        ;;
esac

if [ -n "$preversion" ]; then
    if dpkg --compare-versions "$preversion" lt 2.13-39; then
       # upgrading from a pre-multiarch libc to a multiarch libc; we have
       # to blow away /etc/ld.so.cache, otherwise the old unpacked libc
       # is still first in the cache and segfaults when combined with
       # our newly-unpacked ld.so. Do this last to avoid slowing down the
       # rest of the upgrade.  Version number bumped to 2.13-39 to also
       # cover cache format upgrades for ARM.
       rm -f /etc/ld.so.cache
       rm -f /var/cache/ldconfig/aux-cache
    fi
fi

exit 0
